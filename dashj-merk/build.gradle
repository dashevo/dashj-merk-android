plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'maven'
    id 'signing'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "0.22-SNAPSHOT"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        pickFirst '**/*.so'
    }

    ndkVersion = "21.3.6528147"
}

apply plugin: 'org.mozilla.rust-android-gradle.rust-android'

cargo {
    module  = "./src/main/rust"       // Or whatever directory contains your Cargo.toml
    libname = "dashj_merk"          // Or whatever matches Cargo.toml's [package] name.
    targets = ["arm", "arm64", "x86", "x86_64"]  // See bellow for a longer list of options
    prebuiltToolchains = true
    profile = 'release'
    verbose = false
    rustupChannel = "nightly"
    targetDirectory = './build/rust'
    targetIncludes = ['libdashj_merk.so']
}

tasks.whenTaskAdded { task ->
    if ((task.name == 'javaPreCompileDebug' || task.name == 'javaPreCompileRelease')) {
        task.dependsOn 'cargoBuild'
    }
}

preBuild.dependsOn "cargoBuild"

task copyArm8Library(type: Copy) {
    from 'src/main/rust/target/aarch64-linux-android/release/libdashj_merk.so'
    from android.ndkDirectory.getPath() + '/sources/cxx-stl/llvm-libc++/libs/arm64-v8a/libc++_shared.so'
    into 'src/main/jniLibs/arm64-v8a'
}

task copyArm7Library(type: Copy) {
    from './src/main/rust/target/armv7-linux-androideabi/release/libdashj_merk.so'
    from android.ndkDirectory.getPath() + '/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a/libc++_shared.so'
    into './src/main/jniLibs/armeabi-v7a'
}

task copyX86Library(type: Copy) {
    from 'src/main/rust/target/i686-linux-android/release/libdashj_merk.so'
    from android.ndkDirectory.getPath() + '/sources/cxx-stl/llvm-libc++/libs/x86/libc++_shared.so'
    into 'src/main/jniLibs/x86'
}

task copyX64Library(type: Copy) {
    from './src/main/rust/target/x86_64-linux-android/release/libdashj_merk.so'
    from android.ndkDirectory.getPath() + '/sources/cxx-stl/llvm-libc++/libs/x86_64/libc++_shared.so'
    into './src/main/jniLibs/x86_64'
}

preBuild.dependsOn 'copyArm8Library'
preBuild.dependsOn 'copyArm7Library'
preBuild.dependsOn 'copyX86Library'
preBuild.dependsOn 'copyX64Library'

dependencies {
    //implementation 'org.dashj.android:dashj-merk:0.20-SNAPSHOT'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    //testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
group 'org.dashj.android'
version '0.22-SNAPSHOT'

task sourcesJar(type: Jar) {
    classifier 'sources'
    from android.sourceSets.main.java.srcDirs
}
afterEvaluate {
    publishing {
        tasks.withType(Sign)*.enabled = false
        publications {
            maven(MavenPublication) {
                artifact sourcesJar
                from components.release
            }
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

assemble.dependsOn(publishToMavenLocal)

//test {
 //   useJUnitPlatform()
//}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}


signing {
    required { gradle.taskGraph.hasTask("publish") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: project.hasProperty('ossrhUsername')?project.findProperty('ossrhUsername'):'', password: project.hasProperty('ossrhPassword')?project.findProperty('ossrhPassword'):'')
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: project.hasProperty('ossrhUsername')?project.findProperty('ossrhUsername'):'', password: project.hasProperty('ossrhPassword')?project.findProperty('ossrhPassword'):'')
            }

            pom.project {
                name 'DashJ Merk Android'
                packaging 'aar'
                groupId 'org.dashj.android'
                artifactId 'dashj-merk'
                version version
                description 'Dash Merk Library for Android'
                url 'https://github.com/hashengineering/dashj-merk-android'

                scm {
                    connection 'scm:svn:https://github.com/hashengineering/dashj-merk-android'
                    developerConnection 'scm:svn:https://github.com/hashengineering/dashj-merk-android'
                    url 'https://github.com/hashengineering/dashj-merk-android'
                }

                licenses {
                    license {
                        name 'MIT'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id 'hashengineering'
                        name 'HashEngineering'
                        email 'hashengineeringsolutions@gmail.com'
                    }
                }
            }
        }
    }
}